1c94f5382bf93689ba8e920a39064607
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HomeStoryStore = exports.StoryModel = exports.Chapter = void 0;
const mobx_state_tree_1 = require("mobx-state-tree");
exports.Chapter = mobx_state_tree_1.types.model("Chapter", {
    title: mobx_state_tree_1.types.string,
    content: mobx_state_tree_1.types.optional(mobx_state_tree_1.types.string, "")
}).actions(self => ({
    addChapter(title, content) {
        self.title = title;
        self.content = content;
    },
    updateContent(content) {
        self.content = content;
    }
}));
exports.StoryModel = mobx_state_tree_1.types.model("StoryModel", {
    name: mobx_state_tree_1.types.string,
    createDate: mobx_state_tree_1.types.Date,
    chapters: mobx_state_tree_1.types.optional(mobx_state_tree_1.types.array(exports.Chapter), []),
    category: mobx_state_tree_1.types.string
}).actions(self => ({
    addStory(name, createDate, chapter, category) {
        self.name = name;
        self.createDate = createDate;
        self.chapters.push(chapter);
        self.category = category;
    },
    changeName(name) {
        self.name = name;
    },
    changeCategory(category) {
        self.category = category;
    },
    addChapter(chapter) {
        self.chapters.push(chapter);
    },
    removeChapter(index) {
        self.chapters.spliceWithArray(index, 1);
    },
    updateChapter(index, content) {
        self.chapters[index].updateContent(content);
    }
}));
exports.HomeStoryStore = mobx_state_tree_1.types.model("HomeStory", {
    stories: mobx_state_tree_1.types.array(exports.StoryModel),
}).actions(self => ({
    addStory(story) {
        self.stories.push(story);
    }
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxWaW5cXERlc2t0b3BcXGxhdmFYXFxmcm9udFxcc3JjXFxzdG9yZVxcU3RvcnlTdG9yZS50cyIsIm1hcHBpbmdzIjoiOzs7QUFBQSxxREFBaUQ7QUFVcEMsUUFBQSxPQUFPLEdBQUcsdUJBQUssQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFO0lBQzFDLEtBQUssRUFBRSx1QkFBSyxDQUFDLE1BQU07SUFDbkIsT0FBTyxFQUFFLHVCQUFLLENBQUMsUUFBUSxDQUFDLHVCQUFLLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQztDQUM1QyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNoQixVQUFVLENBQUMsS0FBYSxFQUFFLE9BQWU7UUFDckMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUE7UUFDbEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7SUFDMUIsQ0FBQztJQUNELGFBQWEsQ0FBQyxPQUFlO1FBQ3pCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO0lBQzFCLENBQUM7Q0FDSixDQUFDLENBQUMsQ0FBQTtBQUlVLFFBQUEsVUFBVSxHQUFHLHVCQUFLLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRTtJQUNoRCxJQUFJLEVBQUUsdUJBQUssQ0FBQyxNQUFNO0lBQ2xCLFVBQVUsRUFBRSx1QkFBSyxDQUFDLElBQUk7SUFDdEIsUUFBUSxFQUFFLHVCQUFLLENBQUMsUUFBUSxDQUFDLHVCQUFLLENBQUMsS0FBSyxDQUFDLGVBQU8sQ0FBQyxFQUFFLEVBQUUsQ0FBQztJQUNsRCxRQUFRLEVBQUUsdUJBQUssQ0FBQyxNQUFNO0NBQ3pCLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2hCLFFBQVEsQ0FBQyxJQUFZLEVBQUUsVUFBZ0IsRUFBRSxPQUFzQixFQUFFLFFBQWdCO1FBQzdFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFBO1FBQ2hCLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFBO1FBQzVCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQzNCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFBO0lBQzVCLENBQUM7SUFDRCxVQUFVLENBQUMsSUFBWTtRQUNuQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQTtJQUNwQixDQUFDO0lBQ0QsY0FBYyxDQUFDLFFBQWdCO1FBQzNCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFBO0lBQzVCLENBQUM7SUFDRCxVQUFVLENBQUMsT0FBZ0M7UUFDdkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDL0IsQ0FBQztJQUNELGFBQWEsQ0FBQyxLQUFhO1FBQ3ZCLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUMzQyxDQUFDO0lBQ0QsYUFBYSxDQUFDLEtBQWEsRUFBRSxPQUFlO1FBQ3hDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQy9DLENBQUM7Q0FFSixDQUFDLENBQUMsQ0FBQTtBQUdVLFFBQUEsY0FBYyxHQUFHLHVCQUFLLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRTtJQUNuRCxPQUFPLEVBQUUsdUJBQUssQ0FBQyxLQUFLLENBQUMsa0JBQVUsQ0FBQztDQUNuQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNoQixRQUFRLENBQUMsS0FBa0I7UUFDdkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDNUIsQ0FBQztDQUNKLENBQUMsQ0FBQyxDQUFBIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVmluXFxEZXNrdG9wXFxsYXZhWFxcZnJvbnRcXHNyY1xcc3RvcmVcXFN0b3J5U3RvcmUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdHlwZXMsIEluc3RhbmNlIH0gZnJvbSBcIm1vYngtc3RhdGUtdHJlZVwiXHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDaGFwdGVyIHtcclxuICAgIHRpdGxlOiBzdHJpbmcsXHJcbiAgICBjb250ZW50OiBzdHJpbmcsXHJcbn1cclxuXHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IENoYXB0ZXIgPSB0eXBlcy5tb2RlbChcIkNoYXB0ZXJcIiwge1xyXG4gICAgdGl0bGU6IHR5cGVzLnN0cmluZyxcclxuICAgIGNvbnRlbnQ6IHR5cGVzLm9wdGlvbmFsKHR5cGVzLnN0cmluZywgXCJcIilcclxufSkuYWN0aW9ucyhzZWxmID0+ICh7XHJcbiAgICBhZGRDaGFwdGVyKHRpdGxlOiBzdHJpbmcsIGNvbnRlbnQ6IHN0cmluZykge1xyXG4gICAgICAgIHNlbGYudGl0bGUgPSB0aXRsZVxyXG4gICAgICAgIHNlbGYuY29udGVudCA9IGNvbnRlbnRcclxuICAgIH0sXHJcbiAgICB1cGRhdGVDb250ZW50KGNvbnRlbnQ6IHN0cmluZykge1xyXG4gICAgICAgIHNlbGYuY29udGVudCA9IGNvbnRlbnRcclxuICAgIH1cclxufSkpXHJcblxyXG50eXBlIElDaGFwdGVyTW9kZWwgPSBJbnN0YW5jZTx0eXBlb2YgQ2hhcHRlcj5cclxudHlwZSBJQ2hhcHRlck1vZGVBcnJheSA9IEluc3RhbmNlPHR5cGVvZiBDaGFwdGVyW10+XHJcbmV4cG9ydCBjb25zdCBTdG9yeU1vZGVsID0gdHlwZXMubW9kZWwoXCJTdG9yeU1vZGVsXCIsIHtcclxuICAgIG5hbWU6IHR5cGVzLnN0cmluZyxcclxuICAgIGNyZWF0ZURhdGU6IHR5cGVzLkRhdGUsXHJcbiAgICBjaGFwdGVyczogdHlwZXMub3B0aW9uYWwodHlwZXMuYXJyYXkoQ2hhcHRlciksIFtdKSxcclxuICAgIGNhdGVnb3J5OiB0eXBlcy5zdHJpbmdcclxufSkuYWN0aW9ucyhzZWxmID0+ICh7XHJcbiAgICBhZGRTdG9yeShuYW1lOiBzdHJpbmcsIGNyZWF0ZURhdGU6IERhdGUsIGNoYXB0ZXI6IElDaGFwdGVyTW9kZWwsIGNhdGVnb3J5OiBzdHJpbmcpIHtcclxuICAgICAgICBzZWxmLm5hbWUgPSBuYW1lXHJcbiAgICAgICAgc2VsZi5jcmVhdGVEYXRlID0gY3JlYXRlRGF0ZVxyXG4gICAgICAgIHNlbGYuY2hhcHRlcnMucHVzaChjaGFwdGVyKVxyXG4gICAgICAgIHNlbGYuY2F0ZWdvcnkgPSBjYXRlZ29yeVxyXG4gICAgfSxcclxuICAgIGNoYW5nZU5hbWUobmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgc2VsZi5uYW1lID0gbmFtZVxyXG4gICAgfSxcclxuICAgIGNoYW5nZUNhdGVnb3J5KGNhdGVnb3J5OiBzdHJpbmcpIHtcclxuICAgICAgICBzZWxmLmNhdGVnb3J5ID0gY2F0ZWdvcnlcclxuICAgIH0sXHJcbiAgICBhZGRDaGFwdGVyKGNoYXB0ZXI6IElDaGFwdGVyTW9kZWwgfCBDaGFwdGVyKSB7XHJcbiAgICAgICAgc2VsZi5jaGFwdGVycy5wdXNoKGNoYXB0ZXIpXHJcbiAgICB9LFxyXG4gICAgcmVtb3ZlQ2hhcHRlcihpbmRleDogbnVtYmVyKSB7XHJcbiAgICAgICAgc2VsZi5jaGFwdGVycy5zcGxpY2VXaXRoQXJyYXkoaW5kZXgsIDEpXHJcbiAgICB9LFxyXG4gICAgdXBkYXRlQ2hhcHRlcihpbmRleDogbnVtYmVyLCBjb250ZW50OiBzdHJpbmcpIHtcclxuICAgICAgICBzZWxmLmNoYXB0ZXJzW2luZGV4XS51cGRhdGVDb250ZW50KGNvbnRlbnQpXHJcbiAgICB9XHJcblxyXG59KSlcclxuXHJcbnR5cGUgSVN0b3J5TW9kZWwgPSBJbnN0YW5jZTx0eXBlb2YgU3RvcnlNb2RlbD5cclxuZXhwb3J0IGNvbnN0IEhvbWVTdG9yeVN0b3JlID0gdHlwZXMubW9kZWwoXCJIb21lU3RvcnlcIiwge1xyXG4gICAgc3RvcmllczogdHlwZXMuYXJyYXkoU3RvcnlNb2RlbCksXHJcbn0pLmFjdGlvbnMoc2VsZiA9PiAoe1xyXG4gICAgYWRkU3Rvcnkoc3Rvcnk6IElTdG9yeU1vZGVsKSB7XHJcbiAgICAgICAgc2VsZi5zdG9yaWVzLnB1c2goc3RvcnkpXHJcbiAgICB9XHJcbn0pKVxyXG5cclxuXHJcbiJdLCJ2ZXJzaW9uIjozfQ==