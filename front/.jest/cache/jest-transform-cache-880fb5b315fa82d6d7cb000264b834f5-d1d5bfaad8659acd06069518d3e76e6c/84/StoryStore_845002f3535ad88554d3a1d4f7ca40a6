4eecb2b64d9a7263392240d29a9d25a3
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HomeStoryStore = exports.StoryModel = exports.Chapter = void 0;
const mobx_state_tree_1 = require("mobx-state-tree");
exports.Chapter = mobx_state_tree_1.types.model("Chapter", {
    title: mobx_state_tree_1.types.string,
    content: mobx_state_tree_1.types.optional(mobx_state_tree_1.types.string, "")
}).actions(self => ({
    addChapter(title, content) {
        self.title = title;
        self.content = content;
    }
}));
exports.StoryModel = mobx_state_tree_1.types.model("StoryModel", {
    name: mobx_state_tree_1.types.string,
    createDate: mobx_state_tree_1.types.Date,
    chapters: mobx_state_tree_1.types.optional(mobx_state_tree_1.types.array(exports.Chapter), []),
    category: mobx_state_tree_1.types.string
}).actions(self => ({
    addStory(name, createDate, chapter, category) {
        self.name = name;
        self.createDate = createDate;
        self.chapters.push(chapter);
        self.category = category;
    },
    changeName(name) {
        self.name = name;
    },
    changeCategory(category) {
        self.category = category;
    },
    addChapter(chapter) {
        self.chapters.push(chapter);
    },
    removeChapter(index) {
        self.chapters.spliceWithArray(index, 1);
    }
}));
exports.HomeStoryStore = mobx_state_tree_1.types.model("HomeStory", {
    stories: mobx_state_tree_1.types.array(exports.StoryModel),
}).actions(self => ({
    addStory(story) {
        self.stories.push(story);
    }
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxWaW5cXERlc2t0b3BcXGxhdmFYXFxmcm9udFxcc3JjXFxzdG9yZVxcU3RvcnlTdG9yZS50cyIsIm1hcHBpbmdzIjoiOzs7QUFBQSxxREFBaUQ7QUFVcEMsUUFBQSxPQUFPLEdBQUcsdUJBQUssQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFO0lBQzFDLEtBQUssRUFBRSx1QkFBSyxDQUFDLE1BQU07SUFDbkIsT0FBTyxFQUFFLHVCQUFLLENBQUMsUUFBUSxDQUFDLHVCQUFLLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQztDQUM1QyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNoQixVQUFVLENBQUMsS0FBYSxFQUFFLE9BQWU7UUFDckMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUE7UUFDbEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7SUFDMUIsQ0FBQztDQUNKLENBQUMsQ0FBQyxDQUFBO0FBR1UsUUFBQSxVQUFVLEdBQUcsdUJBQUssQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFO0lBQ2hELElBQUksRUFBRSx1QkFBSyxDQUFDLE1BQU07SUFDbEIsVUFBVSxFQUFFLHVCQUFLLENBQUMsSUFBSTtJQUN0QixRQUFRLEVBQUUsdUJBQUssQ0FBQyxRQUFRLENBQUMsdUJBQUssQ0FBQyxLQUFLLENBQUMsZUFBTyxDQUFDLEVBQUUsRUFBRSxDQUFDO0lBQ2xELFFBQVEsRUFBRSx1QkFBSyxDQUFDLE1BQU07Q0FDekIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDaEIsUUFBUSxDQUFDLElBQVksRUFBRSxVQUFnQixFQUFFLE9BQXNCLEVBQUUsUUFBZ0I7UUFDN0UsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUE7UUFDaEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUE7UUFDNUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDM0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUE7SUFDNUIsQ0FBQztJQUNELFVBQVUsQ0FBQyxJQUFZO1FBQ25CLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFBO0lBQ3BCLENBQUM7SUFDRCxjQUFjLENBQUMsUUFBZ0I7UUFDM0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUE7SUFDNUIsQ0FBQztJQUNELFVBQVUsQ0FBQyxPQUFnQztRQUN2QyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUMvQixDQUFDO0lBQ0QsYUFBYSxDQUFDLEtBQWE7UUFDdkIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQzNDLENBQUM7Q0FFSixDQUFDLENBQUMsQ0FBQTtBQUdVLFFBQUEsY0FBYyxHQUFHLHVCQUFLLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRTtJQUNuRCxPQUFPLEVBQUUsdUJBQUssQ0FBQyxLQUFLLENBQUMsa0JBQVUsQ0FBQztDQUNuQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNoQixRQUFRLENBQUMsS0FBa0I7UUFDdkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDNUIsQ0FBQztDQUNKLENBQUMsQ0FBQyxDQUFBIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVmluXFxEZXNrdG9wXFxsYXZhWFxcZnJvbnRcXHNyY1xcc3RvcmVcXFN0b3J5U3RvcmUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdHlwZXMsIEluc3RhbmNlIH0gZnJvbSBcIm1vYngtc3RhdGUtdHJlZVwiXHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDaGFwdGVyIHtcclxuICAgIHRpdGxlOiBzdHJpbmcsXHJcbiAgICBjb250ZW50OiBzdHJpbmcsXHJcbn1cclxuXHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IENoYXB0ZXIgPSB0eXBlcy5tb2RlbChcIkNoYXB0ZXJcIiwge1xyXG4gICAgdGl0bGU6IHR5cGVzLnN0cmluZyxcclxuICAgIGNvbnRlbnQ6IHR5cGVzLm9wdGlvbmFsKHR5cGVzLnN0cmluZywgXCJcIilcclxufSkuYWN0aW9ucyhzZWxmID0+ICh7XHJcbiAgICBhZGRDaGFwdGVyKHRpdGxlOiBzdHJpbmcsIGNvbnRlbnQ6IHN0cmluZykge1xyXG4gICAgICAgIHNlbGYudGl0bGUgPSB0aXRsZVxyXG4gICAgICAgIHNlbGYuY29udGVudCA9IGNvbnRlbnRcclxuICAgIH1cclxufSkpXHJcblxyXG50eXBlIElDaGFwdGVyTW9kZWwgPSBJbnN0YW5jZTx0eXBlb2YgQ2hhcHRlcj5cclxuZXhwb3J0IGNvbnN0IFN0b3J5TW9kZWwgPSB0eXBlcy5tb2RlbChcIlN0b3J5TW9kZWxcIiwge1xyXG4gICAgbmFtZTogdHlwZXMuc3RyaW5nLFxyXG4gICAgY3JlYXRlRGF0ZTogdHlwZXMuRGF0ZSxcclxuICAgIGNoYXB0ZXJzOiB0eXBlcy5vcHRpb25hbCh0eXBlcy5hcnJheShDaGFwdGVyKSwgW10pLFxyXG4gICAgY2F0ZWdvcnk6IHR5cGVzLnN0cmluZ1xyXG59KS5hY3Rpb25zKHNlbGYgPT4gKHtcclxuICAgIGFkZFN0b3J5KG5hbWU6IHN0cmluZywgY3JlYXRlRGF0ZTogRGF0ZSwgY2hhcHRlcjogSUNoYXB0ZXJNb2RlbCwgY2F0ZWdvcnk6IHN0cmluZykge1xyXG4gICAgICAgIHNlbGYubmFtZSA9IG5hbWVcclxuICAgICAgICBzZWxmLmNyZWF0ZURhdGUgPSBjcmVhdGVEYXRlXHJcbiAgICAgICAgc2VsZi5jaGFwdGVycy5wdXNoKGNoYXB0ZXIpXHJcbiAgICAgICAgc2VsZi5jYXRlZ29yeSA9IGNhdGVnb3J5XHJcbiAgICB9LFxyXG4gICAgY2hhbmdlTmFtZShuYW1lOiBzdHJpbmcpIHtcclxuICAgICAgICBzZWxmLm5hbWUgPSBuYW1lXHJcbiAgICB9LFxyXG4gICAgY2hhbmdlQ2F0ZWdvcnkoY2F0ZWdvcnk6IHN0cmluZykge1xyXG4gICAgICAgIHNlbGYuY2F0ZWdvcnkgPSBjYXRlZ29yeVxyXG4gICAgfSxcclxuICAgIGFkZENoYXB0ZXIoY2hhcHRlcjogSUNoYXB0ZXJNb2RlbCB8IENoYXB0ZXIpIHtcclxuICAgICAgICBzZWxmLmNoYXB0ZXJzLnB1c2goY2hhcHRlcilcclxuICAgIH0sXHJcbiAgICByZW1vdmVDaGFwdGVyKGluZGV4OiBudW1iZXIpIHtcclxuICAgICAgICBzZWxmLmNoYXB0ZXJzLnNwbGljZVdpdGhBcnJheShpbmRleCwgMSlcclxuICAgIH1cclxuXHJcbn0pKVxyXG5cclxudHlwZSBJU3RvcnlNb2RlbCA9IEluc3RhbmNlPHR5cGVvZiBTdG9yeU1vZGVsPlxyXG5leHBvcnQgY29uc3QgSG9tZVN0b3J5U3RvcmUgPSB0eXBlcy5tb2RlbChcIkhvbWVTdG9yeVwiLCB7XHJcbiAgICBzdG9yaWVzOiB0eXBlcy5hcnJheShTdG9yeU1vZGVsKSxcclxufSkuYWN0aW9ucyhzZWxmID0+ICh7XHJcbiAgICBhZGRTdG9yeShzdG9yeTogSVN0b3J5TW9kZWwpIHtcclxuICAgICAgICBzZWxmLnN0b3JpZXMucHVzaChzdG9yeSlcclxuICAgIH1cclxufSkpXHJcblxyXG5cclxuIl0sInZlcnNpb24iOjN9