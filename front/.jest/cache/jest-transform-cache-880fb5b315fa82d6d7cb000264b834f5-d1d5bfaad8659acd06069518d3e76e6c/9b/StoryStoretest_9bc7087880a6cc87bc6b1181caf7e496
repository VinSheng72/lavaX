49218e85c679cd1fe83b8af2df16b917
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const StoryStore_1 = require("./StoryStore");
it("Story Modal", () => {
    const item = StoryStore_1.Chapter.create({
        title: "Chapter1",
        content: "nothing to be written here"
    });
    expect(item.content).toBe("nothing to be written here");
});
// it("Category Model", () => {
//     const item = Category.create({
//         type: "Action",
//     })
//     const item2 = Category.create({
//         type: "Fiction",
//     })
//     const item3 = Category.create({
//         type: "Non-Fiction",
//     })
//     expect(item.type).toBe("Action")
//     expect(item2.type).toBe("Fiction")
//     expect(item3.type).toBe("Non-Fiction")
// })
it("Story Model", () => {
    let chapterList = [];
    chapterList.push(StoryStore_1.Chapter.create({ title: "Chapter1", content: "nothing to be written here" }));
    const date = new Date();
    const story = StoryStore_1.StoryModel.create({
        name: "Bear2",
        createDate: date,
        chapters: chapterList,
        category: "Action"
    });
    expect(story.name).toBe("Bear2");
    expect(story.createDate).toBe(date);
    expect(story.chapters).toStrictEqual([
        {
            title: "Chapter1",
            content: "nothing to be written here"
        }
    ]);
    expect(story.category).toBe("Action");
});
it("add new story model", () => {
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxWaW5cXERlc2t0b3BcXGxhdmFYXFxmcm9udFxcc3JjXFxzdG9yZVxcU3RvcnlTdG9yZS50ZXN0LnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsNkNBQW1EO0FBRW5ELEVBQUUsQ0FBQyxhQUFhLEVBQUUsR0FBRyxFQUFFO0lBQ25CLE1BQU0sSUFBSSxHQUFHLG9CQUFPLENBQUMsTUFBTSxDQUFDO1FBQ3hCLEtBQUssRUFBRSxVQUFVO1FBQ2pCLE9BQU8sRUFBRSw0QkFBNEI7S0FDeEMsQ0FBQyxDQUFBO0lBRUYsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsNEJBQTRCLENBQUMsQ0FBQTtBQUMzRCxDQUFDLENBQUMsQ0FBQTtBQUdGLCtCQUErQjtBQUMvQixxQ0FBcUM7QUFDckMsMEJBQTBCO0FBQzFCLFNBQVM7QUFDVCxzQ0FBc0M7QUFDdEMsMkJBQTJCO0FBQzNCLFNBQVM7QUFDVCxzQ0FBc0M7QUFDdEMsK0JBQStCO0FBQy9CLFNBQVM7QUFFVCx1Q0FBdUM7QUFDdkMseUNBQXlDO0FBQ3pDLDZDQUE2QztBQUM3QyxLQUFLO0FBR0wsRUFBRSxDQUFDLGFBQWEsRUFBRSxHQUFHLEVBQUU7SUFDbkIsSUFBSSxXQUFXLEdBQUcsRUFBRSxDQUFBO0lBQ3BCLFdBQVcsQ0FBQyxJQUFJLENBQUMsb0JBQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUM5RixNQUFNLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFBO0lBQ3ZCLE1BQU0sS0FBSyxHQUFHLHVCQUFVLENBQUMsTUFBTSxDQUFDO1FBQzVCLElBQUksRUFBRSxPQUFPO1FBQ2IsVUFBVSxFQUFFLElBQUk7UUFDaEIsUUFBUSxFQUFFLFdBQVc7UUFDckIsUUFBUSxFQUFFLFFBQVE7S0FDckIsQ0FBQyxDQUFBO0lBRUYsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDaEMsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDbkMsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxhQUFhLENBQUM7UUFDakM7WUFDSSxLQUFLLEVBQUUsVUFBVTtZQUNqQixPQUFPLEVBQUUsNEJBQTRCO1NBQ3hDO0tBQ0osQ0FBQyxDQUFBO0lBQ0YsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7QUFDekMsQ0FBQyxDQUFDLENBQUE7QUFFRixFQUFFLENBQUMscUJBQXFCLEVBQUUsR0FBRyxFQUFFO0FBRS9CLENBQUMsQ0FBQyxDQUFBIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVmluXFxEZXNrdG9wXFxsYXZhWFxcZnJvbnRcXHNyY1xcc3RvcmVcXFN0b3J5U3RvcmUudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdG9yeU1vZGVsLCBDaGFwdGVyIH0gZnJvbSBcIi4vU3RvcnlTdG9yZVwiO1xyXG5cclxuaXQoXCJTdG9yeSBNb2RhbFwiLCAoKSA9PiB7XHJcbiAgICBjb25zdCBpdGVtID0gQ2hhcHRlci5jcmVhdGUoe1xyXG4gICAgICAgIHRpdGxlOiBcIkNoYXB0ZXIxXCIsXHJcbiAgICAgICAgY29udGVudDogXCJub3RoaW5nIHRvIGJlIHdyaXR0ZW4gaGVyZVwiXHJcbiAgICB9KVxyXG5cclxuICAgIGV4cGVjdChpdGVtLmNvbnRlbnQpLnRvQmUoXCJub3RoaW5nIHRvIGJlIHdyaXR0ZW4gaGVyZVwiKVxyXG59KVxyXG5cclxuXHJcbi8vIGl0KFwiQ2F0ZWdvcnkgTW9kZWxcIiwgKCkgPT4ge1xyXG4vLyAgICAgY29uc3QgaXRlbSA9IENhdGVnb3J5LmNyZWF0ZSh7XHJcbi8vICAgICAgICAgdHlwZTogXCJBY3Rpb25cIixcclxuLy8gICAgIH0pXHJcbi8vICAgICBjb25zdCBpdGVtMiA9IENhdGVnb3J5LmNyZWF0ZSh7XHJcbi8vICAgICAgICAgdHlwZTogXCJGaWN0aW9uXCIsXHJcbi8vICAgICB9KVxyXG4vLyAgICAgY29uc3QgaXRlbTMgPSBDYXRlZ29yeS5jcmVhdGUoe1xyXG4vLyAgICAgICAgIHR5cGU6IFwiTm9uLUZpY3Rpb25cIixcclxuLy8gICAgIH0pXHJcblxyXG4vLyAgICAgZXhwZWN0KGl0ZW0udHlwZSkudG9CZShcIkFjdGlvblwiKVxyXG4vLyAgICAgZXhwZWN0KGl0ZW0yLnR5cGUpLnRvQmUoXCJGaWN0aW9uXCIpXHJcbi8vICAgICBleHBlY3QoaXRlbTMudHlwZSkudG9CZShcIk5vbi1GaWN0aW9uXCIpXHJcbi8vIH0pXHJcblxyXG5cclxuaXQoXCJTdG9yeSBNb2RlbFwiLCAoKSA9PiB7XHJcbiAgICBsZXQgY2hhcHRlckxpc3QgPSBbXVxyXG4gICAgY2hhcHRlckxpc3QucHVzaChDaGFwdGVyLmNyZWF0ZSh7IHRpdGxlOiBcIkNoYXB0ZXIxXCIsIGNvbnRlbnQ6IFwibm90aGluZyB0byBiZSB3cml0dGVuIGhlcmVcIiB9KSlcclxuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgpXHJcbiAgICBjb25zdCBzdG9yeSA9IFN0b3J5TW9kZWwuY3JlYXRlKHtcclxuICAgICAgICBuYW1lOiBcIkJlYXIyXCIsXHJcbiAgICAgICAgY3JlYXRlRGF0ZTogZGF0ZSxcclxuICAgICAgICBjaGFwdGVyczogY2hhcHRlckxpc3QsXHJcbiAgICAgICAgY2F0ZWdvcnk6IFwiQWN0aW9uXCJcclxuICAgIH0pXHJcblxyXG4gICAgZXhwZWN0KHN0b3J5Lm5hbWUpLnRvQmUoXCJCZWFyMlwiKVxyXG4gICAgZXhwZWN0KHN0b3J5LmNyZWF0ZURhdGUpLnRvQmUoZGF0ZSlcclxuICAgIGV4cGVjdChzdG9yeS5jaGFwdGVycykudG9TdHJpY3RFcXVhbChbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aXRsZTogXCJDaGFwdGVyMVwiLFxyXG4gICAgICAgICAgICBjb250ZW50OiBcIm5vdGhpbmcgdG8gYmUgd3JpdHRlbiBoZXJlXCJcclxuICAgICAgICB9XHJcbiAgICBdKVxyXG4gICAgZXhwZWN0KHN0b3J5LmNhdGVnb3J5KS50b0JlKFwiQWN0aW9uXCIpXHJcbn0pXHJcblxyXG5pdChcImFkZCBuZXcgc3RvcnkgbW9kZWxcIiwgKCkgPT4ge1xyXG5cclxufSkiXSwidmVyc2lvbiI6M30=